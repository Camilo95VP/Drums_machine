{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["sounds","key","mp3","Box","props","playSound","console","log","audio","current","play","React","createRef","window","document","addEventListener","e","toUpperCase","text","this","className","onClick","ref","src","id","Component","App","map","sound","idx","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAOMA,G,MAAS,CACb,CACEC,IAAI,IACJC,IAAK,2DAEP,CACED,IAAI,IACJC,IAAI,2DAEN,CACED,IAAI,IACJC,IAAI,2DAEN,CACED,IAAI,IACJC,IAAI,mEAEN,CACED,IAAI,IACJC,IAAI,0DAEN,CACED,IAAI,IACJC,IAAI,2DAEN,CACED,IAAI,IACJC,IAAI,gEAEN,CACED,IAAI,IACJC,IAAI,iEAEN,CACED,IAAI,IACJC,IAAI,6DAcFC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,UAAY,WACVC,QAAQC,IAAI,EAAKC,MAAMC,SACvB,EAAKD,MAAMC,QAAQC,QAXnB,EAAKF,MAAQG,IAAMC,YAEnBC,OAAOC,SAASC,iBAAiB,WAAW,SAACC,GACvCA,EAAEf,IAAIgB,gBAAkBb,EAAMc,MAChC,EAAKV,MAAMC,QAAQC,UAPN,E,qDAkBV,IAAD,EACaS,KAAKf,MAAjBc,EADD,EACCA,KAAKV,EADN,EACMA,MACZ,OACE,yBAAKY,UAAU,aAAaC,QAASF,KAAKd,WACvCa,EACD,2BAAOI,IAAKH,KAAKX,MAAOe,IAAKf,EAAOY,UAAU,OAAOI,GAAIN,S,GAxB/CP,IAAMc,WA8BTC,EAvCJ,kBACT,yBAAKF,GAAG,UAAUJ,UAAU,WACzBpB,EAAO2B,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,EAAD,CAAKX,KAAMU,EAAM3B,IAAKA,IAAK4B,EAAKrB,MAAOoB,EAAM1B,WCtC/B4B,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAW,kBAAC,EAAD,MAAUrB,SAASsB,eAAe,SD6HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.fe643626.chunk.js","sourcesContent":["import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\n\n// const keys= [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"];\n\nconst sounds = [\n  {\n    key:'Q',\n    mp3: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3',\n  },\n  {\n    key:'W',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3',\n  },\n  {\n    key:'E',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3',\n  },\n  {\n    key:'A',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3',\n  },\n  {\n    key:'S',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3',\n  },\n  {\n    key:'D',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3',\n  },\n  {\n    key:'Z',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3',\n  },\n  {\n    key:'X',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3',\n  },\n  {\n    key:'C',\n    mp3:'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3',\n  }\n]\n\n\nconst App =()=> (\n  <div id=\"display\" className=\"display\">\n    {sounds.map((sound, idx) => (\n      <Box text={sound.key} key={idx} audio={sound.mp3} />\n    ))}\n  </div>\n);  \n  \n\nclass Box extends React.Component{\n  constructor(props) {\n    super(props);\n\n    this.audio = React.createRef();\n\n    window.document.addEventListener('keydown', (e) =>{\n      if (e.key.toUpperCase() === props.text) {\n        this.audio.current.play();\n      }\n    })\n  }\n\n  playSound = () => {\n    console.log(this.audio.current);\n    this.audio.current.play();\n  }\n\n\n  render(){\n    const {text,audio}=this.props;\n    return(\n      <div className=\"box active\" onClick={this.playSound}>\n        {text}\n        <audio ref={this.audio} src={audio} className=\"clip\" id={text} />\n      </div>\n    ); \n  }\n} \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(    <App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}